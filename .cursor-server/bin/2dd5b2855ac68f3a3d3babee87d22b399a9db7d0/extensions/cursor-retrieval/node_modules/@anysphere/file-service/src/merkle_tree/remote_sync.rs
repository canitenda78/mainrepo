// use crate::merkle_tree::{MerkleNode, File, NodeType};

// use super::{file_utils, LocalConstruction, MerkleTree};
// use sha2::Digest;
// use tonic::async_trait;
// use std::path::PathBuf;
// use std::{collections::HashMap, fs, path::Path, sync::Arc, sync::Weak};

// #[async_trait]
// impl RemoteSync for MerkleTree {
//   /// Key function:
//   /// Syncs the current tree with the remote tree on the server.
//   /// PRECONDITION: the current tree is a subset of the remote tree.
//   async fn sync_with_remote(
//     &mut self,
//     client: super::RepositoryClient,
//   ) -> Result<Vec<File>, tonic::Status> {
//     // alg:
//     // start from the root,
//     // and diff recursively till you find all the files that are different.

//     Ok(vec![])
//   }

// 	/// Key function:
// 	/// Is used to upload a constructed tree to the server.
// 	/// including sending it for the first time.
//   async fn sync_subtree_node(
//     &mut self,
//     node: &MerkleNode,
//     client: super::RepositoryClient,
//   ) -> Result<Vec<File>, tonic::Status> {
//     // alg:
//     // 1. check if you are the same, if so, return empty
//     // 2. if you are not the same, then
//     //      you get the children of the node. you can then figure out which ones are different
//     //      recurse on those!
//     Ok(vec![])
//   }
// }
